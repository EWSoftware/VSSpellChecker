<?xml version="1.0" encoding="utf-8"?>
<topic id="a9ff4ce1-0d6b-4376-8d32-02dae64e2075" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>The following are some known issues and workarounds.</para>
		</introduction>

		<section>
			<content>
				<list class="bullet">
					<listItem>
						<para>The Spell Check Active Document tool window relies on the <ui>Spell check as you type</ui>
configuration option being enabled.  If disabled, spell checking will be unavailable until it is turned back on.
Any open editors will need to be closed and reopened for the new setting to take effect.</para>
					</listItem>

					<listItem>
						<para>The spell checking code attempts to ignore escape sequences within C-style code files so that
it does not flag text as misspelled when preceded by an escape sequence such as <codeInline>\r</codeInline>,
<codeInline>\n</codeInline>, or <codeInline>\t</codeInline>.  This can occasionally result in a false report in
certain situations such as words in a file path that start with what looks like an escape sequence character
(i.e. <codeInline>C:\transform\file.txt</codeInline>).  In such cases, just select the option to ignore the
misspelled instance once or always.  If a certain escaped word is a common enough occurrence, you can add it as
an ignored word in the configuration options.  For C# source code, you can also enable the option to ignore
verbatim strings which typically contain such occurrences.</para>

						<para>Also note that the tagger used in text editor lacks enough context to limit the check to
comments and normal string literals so you may see false reports in other text.  The solution/project spell
checking process does have the necessary context to limit the check to where it is needed.</para>
					</listItem>

					<listItem>
						<para>Due to the way Visual Studio breaks up spans of text for interactive spell checking, it will
only be able to detect doubled words if they appear on the same line.  Doubled words that span line breaks cannot
be detected.  Use the solution/project spell checking tool window to find doubled words that span line breaks.</para>
					</listItem>

					<listItem>
						<para>In C# code, the content of certain elements such as <codeInline>code</codeInline> that are
ignored in conceptual topics and by the solution/project spell checking process will most likely be spell checked
when using spell check as you type in the editor.  Only XML comments elements that are contained within the same
line can be ignored due to the way the tagger is implemented.</para>
					</listItem>

					<listItem>
						<para>On a similar note to the item above, in other languages such as VB.NET, the content of
<codeInline>code</codeInline> elements will typically not be spell checked unless you make a change on a
particular line within it.  Moving the cursor away from the edited line will usually clear any issues on it.
Again, this is due to the way the tagger is implemented.  As noted, such elements are always ignored as expected
when doing a full solution/project spell check.</para>
					</listItem>

					<listItem>
						<para>For a list of common issues related to solution/project spell checking, see the related
<link xlink:href="bda126a1-e534-4172-81dc-35a32d91e4cc" /> topic.</para>
					</listItem>

					<listItem>
						<para>For a list of known issues and limitations with the WPF text box spell checking feature, see
the <link xlink:href="e23551ac-52f5-4505-b2d2-0728c7607fd3" /> topic.</para>
					</listItem>

				</list>

			</content>
		</section>

		<relatedTopics>
			<link xlink:href="fb81c214-0fe0-4d62-a172-d7928d5b91d5" />
			<link xlink:href="027d2fbc-7bfb-4dc3-b4f5-85f95fcf7629" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
